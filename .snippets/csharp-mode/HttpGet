# -*- mode: snippet -*-
# name: controller get/getAll
# key: HttpGet
# --
[HttpGet]
[Authorize]
[ProducesResponseType(typeof(ResponseEnvelope<List<${1:ApplicationIdentityModel}>>), (int)HttpStatusCode.OK)]
public async Task<IActionResult> GetAll()
{
    var result = await m_${1:$(downcase-first (replace-regexp-in-string "Model" "" yas-text))}Service.GetAllAsync();
    return Ok(ResponseEnvelope.Create(result));
}

[HttpGet("{${2:appId}}")]
[Authorize]
[ProducesResponseType(typeof(ResponseEnvelope<$1>), (int)HttpStatusCode.OK)]
public async Task<IActionResult> Get([FromRoute] string $2)
{
    try
    {
        if (!${2:$(upcase-first yas-text)}.TryParse($2, out ${2:$(upcase-first yas-text)} parsed ${2:$(upcase-first yas-text)}))
        {
            throw new BadRequestException(BadRequestExceptionCode.Invalid${2:$(upcase-first yas-text)});
        }
        var result = await m_${1:$(downcase-first (replace-regexp-in-string "Model" "" yas-text))}Service.GetAsync(parsedAppId);
        return Ok(ResponseEnvelope.Create(result));
    }
    catch (${3:ApplicationMotFound}Exception)
    {
        throw new BadRequestException(BadRequestExceptionCode.$3);
    }
}