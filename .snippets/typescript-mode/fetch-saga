# -*- mode: snippet -*-
# name: saga template fetch
# key: fetch-saga
# --
import { ${1:} } from 'Actions/ActionTypes';
import { put, select, call } from 'redux-saga/effects';
import { trackFetchAction, clearFetchAction } from 'Actions/Loading/LoadingActions';
import { RootState } from 'Reducers/RootReducer';
import { ServiceCallerError } from 'Services/ServiceCaller';
import { sendToastNotificationAction } from 'Actions/Notification/NotificationActions';
import { withNavigationGate } from 'Sagas/WithNavigationGate';


export function* ${1:$(snake-to-camel yas-text)}Saga(action: ${1:$(upcase-first (snake-to-camel yas-text))}Action) {
  yield put(trackFetchAction('${1:$(snake-to-camel yas-text)}'));
  try {
    const token = yield select((state: RootState) => state.authentication.token);
    $0
  } catch (e) {
    if (e instanceof ServiceCallerError) {
      yield put(sendToastNotificationAction('warning', e.message));
    } else {
      console.log(e);
      yield put(
        sendToastNotificationAction(
          'warning',
          'An error occurred while $2.'
        )
      );
    }
  } finally {
    yield put(clearFetchAction('${1:$(snake-to-camel yas-text)}'));
  }

  return action;
}

function* afterCompletion(action: ${1:$(upcase-first (snake-to-camel yas-text))}Action) {

}

export function* watch${1:$(upcase-first (snake-to-camel yas-text))}() {
  yield withNavigationGate($1, ${1:$(snake-to-camel yas-text)}Saga, afterCompletion);
}